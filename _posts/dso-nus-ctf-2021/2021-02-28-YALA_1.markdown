---
layout: single
title:  "YALA (PART 1)"
date:   2021-02-28 15:23:31 +0800
categories: dso-nus-ctf-2021
permalink: /dso-nus-ctf-2021/yala-1
---

This is the fourth challenge from the Mobile section of DSO-NUS CTF 2021. The challenge needs us to brute force the password for the user.

## Statement

>Time to look at Yet Another Login App. Try to find the right credentials and login!

We are given an apk.

[apk](/assets/misc/yala-1.apk)


## Observation

First I decompile the apk using this website to get the source code in java.

[http://www.javadecompilers.com/apk](http://www.javadecompilers.com/apk)

Then by analyzing the source code we can find a file responsible for the login logic `C0742d.java`

Observe that the logic is just checking the password against a sha-256 hash

<button class="collapsible btn" id="code">C0742d.java</button>

<div class="content" id="codedata" style="display:none" markdown="1">

```java
package p060b.p064b.p065a.p068e.p069a;

import android.util.Log;
import com.ctf.level3.R;
import com.ctf.level3.data.LoginDataSource;
import java.io.IOException;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.Objects;
import java.util.UUID;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import p000a.p048m.C0454l;
import p000a.p048m.C0458p;
import p060b.p064b.p065a.C0731c;
import p060b.p064b.p065a.p066d.C0732a;
import p060b.p064b.p065a.p066d.C0733b;
import p060b.p064b.p065a.p066d.C0734c;
import p060b.p064b.p065a.p066d.p067d.C0738a;

/* renamed from: b.b.a.e.a.d */
public class C0742d extends C0458p {

    /* renamed from: b */
    public C0454l<C0740b> f2797b = new C0454l<>();

    /* renamed from: c */
    public C0454l<C0741c> f2798c = new C0454l<>();

    /* renamed from: d */
    public C0733b f2799d;

    public C0742d(C0733b bVar) {
        this.f2799d = bVar;
    }

    /* renamed from: b */
    public void mo3257b(String str, String str2) {
        C0734c cVar;
        LoginDataSource loginDataSource = this.f2799d.f2787a;
        Objects.requireNonNull(loginDataSource);
        String aVar = new C0732a(loginDataSource).toString();
        loginDataSource.f3431d = aVar;
        if (!str.equals(aVar)) {
            Log.d("ctflevel2", "Invalid user id");
            cVar = new C0734c.C0736b(new Exception("Invalid user id"));
        } else {
            try {
                char[] cArr = C0731c.f2784a;
                MessageDigest instance = MessageDigest.getInstance("SHA-256");
                instance.update((")(*&^%$#" + str2).getBytes());
                if (Arrays.equals(instance.digest(), loginDataSource.f3430c)) {
                    Log.d("ctflevel2", "Valid credentials entered");
                    try {
                        String str3 = str + ":" + str2;
                        char[] cArr2 = C0731c.f2784a;
                        MessageDigest instance2 = MessageDigest.getInstance("SHA-256");
                        instance2.update(str3.getBytes());
                        byte[] digest = instance2.digest();
                        Log.d("ctflevel2", "CONGRATS! The 1st flag is " + loginDataSource.mo3707a(digest));
                        Log.d("ctflevel2", "There is another flag. Good luck!");
                        if (loginDataSource.mo3708ix(loginDataSource.f3428a, loginDataSource.f3429b, digest) == -1) {
                            cVar = new C0734c.C0736b(new Exception("Initialization failed"));
                        } else {
                            try {
                                byte[] bArr = loginDataSource.f3428a;
                                byte[] bArr2 = loginDataSource.f3429b;
                                SecretKeySpec secretKeySpec = new SecretKeySpec(bArr, "AES");
                                Cipher instance3 = Cipher.getInstance("AES");
                                instance3.init(2, secretKeySpec);
                                byte[] doFinal = instance3.doFinal(bArr2);
                                if (doFinal[0] == 70 && doFinal[1] == 76 && doFinal[2] == 65 && doFinal[3] == 71) {
                                    Log.d("ctflevel3", "CONGRATS! The last flag is " + C0731c.m2370b(doFinal) + ", you have completed this challenge.");
                                    try {
                                        cVar = new C0734c.C0737c(new C0738a(UUID.randomUUID().toString(), ""));
                                    } catch (Exception e) {
                                        cVar = new C0734c.C0736b(new IOException("Error logging in", e));
                                    }
                                } else {
                                    Log.d("ctflevel3", "You are very close!");
                                    cVar = new C0734c.C0736b(new Exception("You are very close!"));
                                }
                            } catch (Exception e2) {
                                e2.printStackTrace();
                                Log.d("ctflevel3", "You are so close!");
                                cVar = new C0734c.C0736b(new Exception("You are so close!"));
                            }
                        }
                    } catch (Exception e3) {
                        e3.printStackTrace();
                        cVar = new C0734c.C0736b(new Exception("Oops"));
                    }
                } else {
                    Log.d("ctflevel2", "Invalid credentials entered");
                    cVar = new C0734c.C0736b(new Exception("Wrong password"));
                }
            } catch (Exception e4) {
                e4.printStackTrace();
            }
        }
        if (cVar instanceof C0734c.C0737c) {
            C0738a aVar2 = ((C0734c.C0737c) cVar).f2789a;
        }
        if (cVar instanceof C0734c.C0737c) {
            this.f2798c.mo1839h(new C0741c(new C0739a(((C0734c.C0737c) cVar).f2789a.f2790a)));
        } else {
            this.f2798c.mo1839h(new C0741c(Integer.valueOf(R.string.login_failed)));
        }
    }
}

```
</div>

## Solution

I need to find a value for `str2` such that the hash is equal to `516b36ed915a70852daf6a06c7fd1a1451d8269a8b2c5ae97110bc77b083c420`.

I tried reverse the sha-256 hash but found nothing.

So the next thing I do is to brute force the password with rockyou.txt . Hope that some weak password will produce the hash after added with ")(*&^%$#".

I used the following code to find the password.

```python
import hashlib

f = open('rockyou.txt',errors="ignore").read().split()
ans = "516b36ed915a70852daf6a06c7fd1a1451d8269a8b2c5ae97110bc77b083c420"

for i in f:
    m = hashlib.sha256()
    m.update(")(*&^%$#".encode())
    m.update(i.encode())
    if (m.hexdigest() == ans):
        print(i)
```

Thankfully, it found `aeroplane` as the password.

Now we can just generate the flag easily.

```java
import java.security.MessageDigest;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

class Sol {

    public static final char[] f2784a = "0123456789ABCDEF".toCharArray();

    /* renamed from: a */
    public static byte[] m2369a(String str) {
        int length = str.length() / 2;
        byte[] bArr = new byte[length];
        for (int i = 0; i < length; i++) {
            int i2 = i * 2;
            bArr[i] = Integer.valueOf(str.substring(i2, i2 + 2), 16).byteValue();
        }
        return bArr;
    }

    /* renamed from: b */
    public static String m2370b(byte[] bArr) {
        char[] cArr = new char[(bArr.length * 2)];
        for (int i = 0; i < bArr.length; i++) {
            var b = (bArr[i] & 255);
            int i2 = i * 2;
            char[] cArr2 = f2784a;
            cArr[i2] = cArr2[b >>> 4];
            cArr[i2 + 1] = cArr2[b & 15];
        }
        return new String(cArr);
    }

    public static final String mo3707a(byte[] bArr) {
        byte[] a = m2369a("915FEF11402D050651818133ADFE98509249307131F7240173784135C136E27DDCF1C2898D405C18C7DE75CCD25C9CCF");
        try {
            SecretKeySpec secretKeySpec = new SecretKeySpec(bArr, "AES");
            Cipher instance = Cipher.getInstance("AES");
            instance.init(2, secretKeySpec);
            byte[] doFinal = instance.doFinal(a);
            if (doFinal[0] == 102 && doFinal[1] == 108 && doFinal[2] == 97 && doFinal[3] == 103) {
                return m2370b(doFinal);
            }
            return "00";
        } catch (Exception e) {
            e.printStackTrace();
            return "00";
        }
    }

    public static void main(String args[]) {
        String str = new String(new byte[]{(byte) (-1462734071 >>> 4), (byte) (-385552254 >>> 9), (byte) (1107918732 >>> 19), (byte) (-198649565 >>> 6), (byte) (728446419 >>> 19), (byte) (718529411 >>> 17), (byte) (-2089595746 >>> 19)});
        String str2 = "aeroplane";
        String str3 = str + ":" + str2;
        try {
            MessageDigest instance2 = MessageDigest.getInstance("SHA-256");
            instance2.update(str3.getBytes());
            byte[] digest = instance2.digest();
            System.out.println("CONGRATS! The 1st flag is " + mo3707a(digest));
        } catch (Exception e){

        }
        
    }
}
```

flag : `DSO-NUS{4c7863c34040f76ffbea3f8341370db4e2c0c9bc110bc9755cd4801c54acb0af}`
